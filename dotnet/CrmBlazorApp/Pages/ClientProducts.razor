@page "/client-products/{clientId:int?}"

<PageTitle>Client Products</PageTitle>

@using CrmBlazorApp.Data
@inject CrmDataService DataService

<h3>Client Products</h3>
@if (ClientId != null && client == null)
{
    <p><em>Client with ID @ClientId is not found</em></p>
}
else if (client == null || products == null)
{
    <p><em>Select client...</em></p>
}
else
{
    <div class="d-flex justify-content-between">
        <div class="flex-grow-1">
            <p>@client.Name</p>
        </div>
        <div class="col-auto">
            <a class="btn btn-info form-control" href="/client-product/add/@ClientId">Add</a>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Client Product ID</th>
                <th>Reference</th>
                <th>Description</th>
                <th>Vendor Product(s)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in products)
            {
                <tr>
                    <td>@p.ClientProductId</td>
                    <td><a href="/client-product/@p.ClientProductId">@p.Reference</a></td>
                    <td>@p.Description</td>
                    <td>
                        <ul>
                            @foreach (var item in p.ClientProductItems)
                            {
                                <li><a href="/vendor-product/@item.VendorProductId">@item.VendorProduct.Reference</a></li>
                            }
                        </ul>
                    </td>
                    <td><a href="/client-product/edit/@p.ClientProductId">Edit</a></td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private DbModels.ClientProduct[]? products;
    private Data.ClientDTO? client;

    [Parameter]
    public int? ClientId { get; set; } = null;  // Default value is null for render a blank page

    protected override async Task OnInitializedAsync()
    {
        if (ClientId != null)
        {
            client = await DataService.GetClientAsync(ClientId.Value);
            if (client != null)
            {
                products = await DataService.GetProductsOfClientAsync(ClientId.Value);
            }
        }
    }
}
