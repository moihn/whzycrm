@page "/client-product/edit/{clientProductId:int}"

<PageTitle>Add Client Product</PageTitle>

@using CrmBlazorApp.Data
@using System.Text;
@using System.ComponentModel.DataAnnotations;
@inject CrmDataService DataService
@inject NavigationManager _nagivationManager

<h3>Add Client Product</h3>

<EditForm Model="product" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label>Client Product Reference</label>
        <InputText @bind-Value="product.Reference" class="form-control" />
        <ValidationMessage For="()=>product.Reference" />
        <label>Description</label>
        <InputText @bind-Value="product.Description" class="form-control" />
        <ValidationMessage For="()=>product.Description" />
        <label>Barcode</label>
        <InputText @bind-Value="product.Barcode" class="form-control" />
        <ValidationMessage For="()=>product.Barcode" />
        <label>Inner PCS</label>
        <InputNumber @bind-Value="product.InnerQty" class="form-control" />
        <label>Carton Length</label>
        <InputNumber @bind-Value="product.CartonLength" class="form-control" />
        <label>Carton Height</label>
        <InputNumber @bind-Value="product.CartonHeight" class="form-control" />
        <label>Carton Width</label>
        <InputNumber @bind-Value="product.CartonWidth" class="form-control" />
        <label>Gross Weight</label>
        <InputNumber @bind-Value="product.GrossWeight" class="form-control" />
        <label>Net Weight</label>
        <InputNumber @bind-Value="product.NetWeight" class="form-control" />
        <label>Item(s)</label>
        <table class="table">
            <thead>
                <tr>
                    <th>Vendor Product Reference</th>
                    <th>Description</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in product.ClientProductItems)
            {
                if (!removedVendorProductIds.Contains(item.VendorProductId))
                {
                <tr>
                    <td>@item.VendorProduct.Reference</td>
                    <td>@item.VendorProduct.Description</td>
                    <td><button type="button" @onclick="() => RemoveClientProductItem(item)">Remove</button></td>
                </tr>
                }
            }
            @foreach (var item in newVendorProducts)
            {
                <tr>
                    <td>@item.Reference</td>
                    <td>@item.Description</td>
                    <td>
                        <button type="button" @onclick="() => RemoveNewVendorProduct(item)">Remove</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <InputText @bind-Value="@newVendorProductReference" class="form-control" />
        <button type="button" @onclick="UpdateVendorProductAsync">Add Vendor Product</button>
    </div>
    <div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>


@code {

    private DbModels.ClientProduct product = new();
    private List<DbModels.VendorProduct> newVendorProducts = new();
    private List<int> removedVendorProductIds = new();

    private string? newVendorProductReference;
    private int? clientId;

    [Parameter]
    public int ClientProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await DataService.GetClientProductByIdAsync(ClientProductId);
        if (product != null)
        {
            clientId = product.ClientId;
        }
    }


    private async void SubmitAsync()
    {

        var newClientProduct = await DataService.SaveUpdatedClientProductAsync(product, removedVendorProductIds, newVendorProducts);
        if (newClientProduct != null)
        {
            if (clientId != null)
            {
                _nagivationManager.NavigateTo($"/client-products/{clientId}");
            }
            else
            {
                _nagivationManager.NavigateTo($"/clients");
            }
        }
    }

    private async void UpdateVendorProductAsync()
    {
        if (!string.IsNullOrEmpty(newVendorProductReference))
        {
            var vendorProduct = await DataService.GetVendorProductDetailByReferenceAsync(newVendorProductReference);
            if (vendorProduct != null)
            {
                if(removedVendorProductIds.RemoveAll(item => item == vendorProduct.VendorProductId) == 0)
                {// not adding back removed item
                    newVendorProducts.Add(vendorProduct);
                    newVendorProductReference = null;
                }
            }
        }
    }

    private void RemoveClientProductItem(DbModels.ClientProductItem item)
    {
        removedVendorProductIds.Add(item.VendorProductId);
    }

    private void RemoveNewVendorProduct(DbModels.VendorProduct item)
    {
        newVendorProducts.Add(item);
    }
}
