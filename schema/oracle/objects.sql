create table VENDOR
(
    ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    NAME VARCHAR2(4000) UNIQUE
);

create table PRODUCT_TYPE
(
    ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    NAME VARCHAR2(4000) UNIQUE
);

create table UNIT_TYPE 
(
    UNIT_TYPE_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    NAME VARCHAR2(4000) NOT NULL
);

create table MATERIAL_TYPE 
(
    TYPE_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    DESCRIPTION VARCHAR2(4000)
);

create table PRICE_TYPE 
(
    PRICE_TYPE_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    NAME          VARCHAR2(4000), 
    INVOICE_RATE  NUMBER(38, 6) NOT NULL
);

create table CURRENCY 
(
    CURRENCY_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    ISO_SYMBOL  VARCHAR2(20) UNIQUE,
    DESCRIPTION VARCHAR2(4000)
);

create table COUNTRY 
(
    COUNTRY_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    NAME       VARCHAR2(4000)
);

create table EXCHANGE_RATE 
(
    RATE_ID     NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    FROM_CCY_ID NUMBER(38) NOT NULL, 
    TO_CCY_ID   NUMBER(38) NOT NULL, 
    MULT_RATE   NUMBER(38, 6) NOT NULL, 
    START_DATE  DATE NOT NULL, 
        CONSTRAINT "U_EXCHANGE_RATE_1" UNIQUE ("FROM_CCY_ID", "TO_CCY_ID", "START_DATE"), 
        CONSTRAINT "FK_EXCHANGE_RATE_1" FOREIGN KEY ("FROM_CCY_ID") REFERENCES "CURRENCY" ("CURRENCY_ID"), 
        CONSTRAINT "FK_EXCHANGE_RATE_2" FOREIGN KEY ("TO_CCY_ID") REFERENCES "CURRENCY" ("CURRENCY_ID")
);

create table VENDOR_PRODUCT 
(
    VENDOR_PRODUCT_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    REFERENCE         VARCHAR2 (4000) NOT NULL, 
    TEST_PERFORMED    CHAR(1), 
    VENDOR_ID         NUMBER(38) NOT NULL, 
    DESCRIPTION       VARCHAR2(4000), 
    MATERIAL_TYPE_ID  NUMBER(38), 
    PRODUCT_TYPE_ID   NUMBER(38) NOT NULL, 
    UNIT_TYPE_ID      NUMBER(38),
    LENGTH            NUMBER(38, 6),
    WIDTH             NUMBER(38, 6),
    HEIGHT            NUMBER(38, 6),
    WEIGHT            NUMBER(38, 6),
        CONSTRAINT "U_VENDOR_PRODUCT_1" UNIQUE ("VENDOR_ID", "REFERENCE"),
        CONSTRAINT "VENDOR_PRODUCT_FK_UNIT" FOREIGN KEY ("UNIT_TYPE_ID") REFERENCES "UNIT_TYPE" ("UNIT_TYPE_ID"),
        CONSTRAINT "VENDOR_PRODUCT_FK_MATERIAL" FOREIGN KEY ("MATERIAL_TYPE_ID") REFERENCES "MATERIAL_TYPE" ("TYPE_ID"),
        CONSTRAINT "VENDOR_PRODUCT_FK_VENDOR" FOREIGN KEY ("VENDOR_ID") REFERENCES "VENDOR" ("ID")
);

create table VENDOR_PRODUCT_MOQ
(
    VENDOR_PRODUCT_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL, 
	QUANTITY          NUMBER(38), 
	START_DATE        DATE NOT NULL, 
        CONSTRAINT "VENDOR_PRODUCT_MOQ_PK" PRIMARY KEY ("VENDOR_PRODUCT_ID", "START_DATE")
);

create table VENDOR_PRODUCT_PACK_DETAIL
(
    VENDOR_PRODUCT_ID NUMBER(38),
    CARTON_LENGTH     NUMBER(38, 6),
    CARTON_WIDTH      NUMBER(38, 6),
    CARTON_HEIGHT     NUMBER(38, 6),
    CARTON_GW         NUMBER(38, 6),
    CARTON_NW         NUMBER(38, 6),
    OUTER_QUANTITY    NUMBER(38),
    INNER_QUANTITY    NUMBER(38),
    NARRATIVE         VARCHAR2(4000),
    START_DATE        DATE,
        CONSTRAINT        "VENDOR_PRODUCT_PACK_DETAIL" PRIMARY KEY ("VENDOR_PRODUCT_ID", "START_DATE")
);


create table VENDOR_PRODUCT_PRICE
(
    PRICE_ID          NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    VENDOR_PRODUCT_ID NUMBER(38) NOT NULL,
    START_DATE        DATE NOT NULL, 
    PRICE             NUMBER(38, 6) NOT NULL, 
    CURRENCY_ID       NUMBER(38) NOT NULL,
    PRICE_TYPE_ID     NUMBER(38) NOT NULL, 
        CONSTRAINT "U_VENDOR_PRODUCT_PRICE_1" UNIQUE ("VENDOR_PRODUCT_ID", "START_DATE"),
        CONSTRAINT "FK_VENDOR_PRODUCT_PRICE_CCY" FOREIGN KEY ("CURRENCY_ID") REFERENCES "CURRENCY" ("CURRENCY_ID"),
        CONSTRAINT "FK_VENDOR_PRODUCT_PRICE_PID" FOREIGN KEY ("VENDOR_PRODUCT_ID") REFERENCES "VENDOR_PRODUCT" ("VENDOR_PRODUCT_ID"), 
        CONSTRAINT "FK_VENDOR_PRODUCT_PRICE_TYPE" FOREIGN KEY ("PRICE_TYPE_ID") REFERENCES "PRICE_TYPE" ("PRICE_TYPE_ID")
);

create table CLIENT
(
    CLIENT_ID  NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    NAME       VARCHAR2(4000), 
    COUNTRY_ID NUMBER
);

create table CLIENT_QUOTATION
(
    QUOTATION_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY, 
    CLIENT_ID    NUMBER(38),
    CURRENCY_ID  NUMBER(38), 
    UPDATED_DATE DATE, 
    SENT         CHAR(1),
        CONSTRAINT "U_CLIENT_QUOTATION_1" UNIQUE ("CLIENT_ID", "UPDATED_DATE"),
        CONSTRAINT "CLIENT_QUOTATION_FK1" FOREIGN KEY ("CURRENCY_ID") REFERENCES "CURRENCY" ("CURRENCY_ID"),
        CONSTRAINT "CLIENT_QUOTATION_FK2" FOREIGN KEY ("CLIENT_ID") REFERENCES "CLIENT" ("CLIENT_ID")
);

create table CLIENT_QUOTATION_ITEM
(
    QUOTATION_ID      NUMBER(38) NOT NULL, 
    VENDOR_PRODUCT_ID NUMBER(38) NOT NULL, 
    PRICE             NUMBER(38,6) NOT NULL, 
    MOQ               NUMBER(38),
    NARRATIVE         VARCHAR2(4000),
        CONSTRAINT "CLIENT_QUOTATION_ITEM_PK" PRIMARY KEY ("QUOTATION_ID", "VENDOR_PRODUCT_ID"),
        CONSTRAINT "CLIENT_QUOTATION_ITEM_FK1" FOREIGN KEY ("QUOTATION_ID") REFERENCES "CLIENT_QUOTATION" ("QUOTATION_ID"),
        CONSTRAINT "CLIENT_QUOTATION_ITEM_FK2" FOREIGN KEY ("VENDOR_PRODUCT_ID") REFERENCES "VENDOR_PRODUCT" ("VENDOR_PRODUCT_ID")
);

create table CLIENT_PRODUCT
(
    CLIENT_PRODUCT_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL,
    CLIENT_ID         NUMBER(38) NOT NULL,
    REFERENCE         VARCHAR2(4000) NOT NULL,
    DESCRIPTION       VARCHAR2(4000),
    NARRATIVE         VARCHAR2(4000),
    BARCODE           VARCHAR2(4000),
        CONSTRAINT "CLIENT_PRODUCT_PK" PRIMARY KEY ("CLIENT_PRODUCT_ID"),
        CONSTRAINT "U_CLIENT_PRODUCT_1" UNIQUE ("CLIENT_ID", "REFERENCE"), 
        CONSTRAINT "FK_CLIENT_PRODUCT_1" FOREIGN KEY ("CLIENT_ID") REFERENCES "CLIENT" ("CLIENT_ID")
);

create table CLIENT_PRODUCT_ITEM
(
    CLIENT_PRODUCT_ITEM_ID NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL,
    CLIENT_PRODUCT_ID NUMBER(38) NOT NULL,
    VENDOR_PRODUCT_ID NUMBER(38) NOT NULL,
    NARRATIVE VARCHAR2(4000),
        CONSTRAINT "CLIENT_PRODUCT_ITEM_PK" PRIMARY KEY ("CLIENT_PRODUCT_ITEM_ID"),
        CONSTRAINT "FK_CLIENT_PRODUCT_ITEM_1" FOREIGN KEY ("CLIENT_PRODUCT_ID") REFERENCES "CLIENT_PRODUCT" ("CLIENT_PRODUCT_ID"),
        CONSTRAINT "FK_CLIENT_PRODUCT_ITEM_2" FOREIGN KEY ("VENDOR_PRODUCT_ID") REFERENCES "VENDOR_PRODUCT" ("VENDOR_PRODUCT_ID")
);

create table CLIENT_ORDER_STATUS
(
    STATUS_ID   NUMBER(38) NOT NULL PRIMARY KEY,
    DESCRIPTION VARCHAR(4000) NOT NULL
);

create table CLIENT_ORDER
(
    ORDER_ID               NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL PRIMARY KEY,
    ORDER_REFERENCE        VARCHAR2(4000) NOT NULL, 
    CLIENT_ID              NUMBER(38) NOT NULL, 
    CLIENT_ORDER_REFERENCE VARCHAR2(4000), 
    CREATION_DATE          DATE NOT NULL,
    SHIPMENT_DATE          DATE,
    STATUS_ID              NUMBER(38) NOT NULL, 
        CONSTRAINT "U_CLIENT_ORDER_REF" UNIQUE ("ORDER_REFERENCE"), 
        CONSTRAINT "U_CLIENT_ORDER_C_REF" UNIQUE ("CLIENT_ID", "CLIENT_ORDER_REFERENCE"), 
        CONSTRAINT "FK_CLIENT_ORDER_C_ID" FOREIGN KEY ("CLIENT_ID") REFERENCES "CLIENT" ("CLIENT_ID"),
        CONSTRAINT "FK_CLIENT_ORDER_S_ID" FOREIGN KEY ("STATUS_ID") REFERENCES "CLIENT_ORDER_STATUS" ("STATUS_ID")
);

create table CLIENT_ORDER_ITEM
(
    ORDER_ITEM_ID     NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 NOCACHE NOT NULL, 
    ORDER_ID          NUMBER(38) NOT NULL, 
    CLIENT_PRODUCT_ID NUMBER(38) NOT NULL, 
    QUANTITY          NUMBER(38) NOT NULL, 
    PRICE             NUMBER(38, 6) NOT NULL, 
    CURRENCY_ID       NUMBER(38) NOT NULL, 
    ADDED_DATE        DATE NOT NULL, 
    ALTERNATIVE_SHIP_DATE DATE, 
        CONSTRAINT "CLIENT_ORDER_ITEM_PK" PRIMARY KEY ("ORDER_ITEM_ID"), 
        CONSTRAINT "U_CLIENT_ORDER_ITEM_1" UNIQUE ("ORDER_ID", "CLIENT_PRODUCT_ID", "ADDED_DATE", "ALTERNATIVE_SHIP_DATE", "PRICE", "CURRENCY_ID"), 
        CONSTRAINT "FK_CLIENT_ORDER_ITEM_1" FOREIGN KEY ("ORDER_ID") REFERENCES "CLIENT_ORDER" ("ORDER_ID"), 
        CONSTRAINT "FK_CLIENT_ORDER_ITEM_2" FOREIGN KEY ("CLIENT_PRODUCT_ID") REFERENCES "CLIENT_PRODUCT" ("CLIENT_PRODUCT_ID")
);



create or replace procedure update_moq
(vendor_name varchar2,
 product_ref varchar2,
 moq NUMBER,
 new_start_date DATE DEFAULT TRUNC(SYSDATE))
as
    my_vendor_id vendor.id%TYPE;
    my_vpi vendor_product.vendor_product_id%TYPE;
    my_moq_count number;
begin
    select ID into my_vendor_id
    from vendor
    where name = vendor_name;
    
    select vendor_product_id into my_vpi
    from vendor_product
    where vendor_id = my_vendor_id
      and reference = product_ref;
    
    select count(*) into my_moq_count
    from vendor_product_moq
    where vendor_product_id = my_vpi
      and start_date = new_start_date;
    
    if my_moq_count = 0 then
        insert into vendor_product_moq
        (vendor_product_id, quantity, start_date)
        values
        (my_vpi, moq, trunc(sysdate));
    else
        update vendor_product_moq
        set quantity = moq
        where vendor_product_id = my_vpi
          and start_date = new_start_date;
    end if;
end;
/

create or replace procedure update_product_size
(vendor_name varchar2,
 product_ref varchar2,
 l_length NUMBER DEFAULT NULL,
 l_width NUMBER DEFAULT NULL,
 l_height NUMBER DEFAULT NULL)
as
    my_vendor_id vendor.id%TYPE;
    my_vpi vendor_product.vendor_product_id%TYPE;
begin
    select ID into my_vendor_id
    from vendor
    where name = vendor_name;
    
    select vendor_product_id into my_vpi
    from vendor_product
    where vendor_id = my_vendor_id
      and reference = product_ref;
    
    update vendor_product
    set length = l_length,
        width = l_width,
        height = l_height
    where vendor_product_id = my_vpi;
end;
/

create or replace procedure update_product_pack_detail
(vendor_name varchar2,
 product_ref varchar2,
 c_length NUMBER,
 c_width NUMBER,
 c_height NUMBER,
 c_outer_pcs NUMBER,
 c_inner_pcs NUMBER DEFAULT NULL,
 c_gw NUMBER default null,
 c_nw NUMBER default null,
 c_narrative varchar2 default null,
 c_start_date DATE default trunc(sysdate)
 )
as
    my_vendor_id vendor.id%TYPE;
    my_vpi vendor_product.vendor_product_id%TYPE;
    my_detail_count number;
begin
    select ID into my_vendor_id
    from vendor
    where name = vendor_name;
    
    select vendor_product_id into my_vpi
    from vendor_product
    where vendor_id = my_vendor_id
      and reference = product_ref;
      
    select count(*) into my_detail_count
    from vendor_product_pack_detail
    where vendor_product_id = my_vpi
      and start_date = c_start_date;

    if my_detail_count = 0 then
        insert into vendor_product_pack_detail
        (vendor_product_id, carton_length, carton_width, carton_height,
         carton_gw, carton_nw, outer_quantity, inner_quantity, narrative,
         start_date)
        values
        (my_vpi, c_length, c_width, c_height,
         c_gw, c_nw, c_outer_pcs, c_inner_pcs, c_narrative,
         c_start_date);
    else
        update vendor_product_pack_detail
        set carton_length = c_length,
            carton_width = c_width,
            carton_height = c_height,
            carton_gw = c_gw,
            carton_nw = c_nw,
            outer_quantity = c_outer_pcs,
            inner_quantity = c_inner_pcs,
            narrative = c_narrative
        where vendor_product_id = my_vpi
          and start_date = c_start_date;
    end if;
end;
/

create or replace procedure add_client_order_item
(i_order_reference varchar2,
i_client_product_ref varchar2,
i_quantity number,
i_price number,
i_alternative_ship_date DATE default NULL,
i_ccy_iso varchar2 default 'USD',
i_added_date date default null)
as
    l_order_id client_order.order_id%TYPE;
    l_client_product_id client_product.client_product_id%TYPE;
    l_ccy_id currency.currency_id%TYPE;
    l_count number;
    l_added_date date;
begin
    begin
        select cp.client_product_id, co.order_id, co.creation_date
        into l_client_product_id, l_order_id, l_added_date
        from client_product cp, client_order co
        where cp.reference = i_client_product_ref
          and cp.client_id = co.client_id
          and co.order_reference = i_order_reference;
    exception
    when NO_DATA_FOUND then
        dbms_output.put_line('Missing product ' ||  i_client_product_ref || ' for order ' || i_order_reference);
        return;
    end;
    
    if i_added_date is not null then
        l_added_date := i_added_date;
    end if;

    select currency_id into l_ccy_id
    from currency
    where ISO_SYMBOL = i_ccy_iso;
    
    select count(*) into l_count
    from client_order_item
    where order_id = l_order_id
      and client_product_id = l_client_product_id;
    
    if l_count = 0 then
        insert into client_order_item
        (order_id, client_product_id, quantity, price, currency_id, added_date, alternative_ship_date)
        values
        (l_order_id, l_client_product_id, i_quantity, i_price, l_ccy_id, l_added_date, i_alternative_ship_date);
    else
        update client_order_item
        set quantity = i_quantity,
            price = i_price,
            currency_id = l_ccy_id,
            added_date = l_added_date,
            alternative_ship_date = i_alternative_ship_date
        where order_id = l_order_id
          and client_product_id = l_client_product_id;
    end if;
end;
/

create or replace procedure add_client_product_item
(i_vendor_id number,
i_vendor_product_ref varchar2,
i_client_id number,
i_client_product_ref varchar2,
i_client_product_description varchar2,
i_barcode varchar2 default null
)
as
    l_client_product_id client_product.client_product_id%TYPE;
    l_vendor_product_id vendor_product.vendor_product_id%TYPE;
    l_client_product_ref client_product.reference%TYPE;
    l_count number;
begin
    if i_client_product_ref is NULL then
        l_client_product_ref := i_vendor_product_ref;
    else
        l_client_product_ref := i_client_product_ref;
    end if;

    begin
        select client_product_id into l_client_product_id
        from client_product
        where client_id = i_client_id
          and reference = l_client_product_ref;
          
        update client_product
        set
          description = i_client_product_description,
          barcode = i_barcode
        where client_product_id = l_client_product_id;
    exception
    when NO_DATA_FOUND then
        --insert client_product
        insert into client_product
        (client_id, reference, description, barcode)
        values
        (i_client_id, l_client_product_ref, i_client_product_description,
        i_barcode)
        returning client_product_id into l_client_product_id;
    end;
    
    select vendor_product_id into l_vendor_product_id
    from vendor_product
    where vendor_id = i_vendor_id
      and reference = i_vendor_product_ref;
    
    select count(*) into l_count
    from client_product_item
    where client_product_id = l_client_product_id
      and vendor_product_id = l_vendor_product_id;
    
    if l_count = 0 then
        insert into client_product_item
        (client_product_id, vendor_product_id)
        values
        (l_client_product_id, l_vendor_product_id);
    end if;
exception
when NO_DATA_FOUND then
    dbms_output.put_line('Missing product ' ||  i_vendor_product_ref || ' from vendor ' || i_vendor_id);
end;
/

